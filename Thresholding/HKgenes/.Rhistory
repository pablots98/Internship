setwd("C:/Users/PC/OneDrive/Documentos")
install.packages("ggplot2")
install.packages("limma")
setwd("C:/Users/PC/OneDrive/Documentos")
install.packages("limma")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
library(vroom)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
library(edgeR)
library(edgeR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
library(DESeq2)
#-----------------------------------------------------------------------------------------------------#
#							Libraries
#-----------------------------------------------------------------------------------------------------#
library("minfi")
install.packages("minfi")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("minfi")
#-----------------------------------------------------------------------------------------------------#
#							Libraries
#-----------------------------------------------------------------------------------------------------#
library("minfi")
# Instalar y cargar biomaRt
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
# Conectar con la base de datos Ensembl
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
setwd("C:/Users/PC/OneDrive/Documentos/Systems_Biology_master/Internship/Internship/Thresholding/HKgenes")
# Lista de ENSEMBL Transcript IDs
datos <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
View(datos)
View(datos)
# Lista de ENSEMBL Transcript IDs
data <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
transcript_ids <- data$Ensembl
# Obtener los ENSEMBL Gene IDs correspondientes
result <- getBM(attributes = c('ensembl_transcript_id', 'ensembl_gene_id'),
filters = 'ensembl_transcript_id',
values = transcript_ids,
mart = ensembl)
setwd("C:/Users/PC/OneDrive/Documentos/Systems_Biology_master/Internship/Internship/Thresholding/HKgenes")
# Instalar y cargar biomaRt
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
# Conectar con la base de datos Ensembl
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Lista de ENSEMBL Transcript IDs
data <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
transcript_ids <- data$Ensembl
# Obtener los ENSEMBL Gene IDs correspondientes
result <- getBM(attributes = c('ensembl_transcript_id', 'ensembl_gene_id'),
filters = 'ensembl_transcript_id',
values = transcript_ids,
mart = ensembl)
setwd("C:/Users/PC/OneDrive/Documentos/Systems_Biology_master/Internship/Internship/Thresholding/HKgenes")
# Instalar y cargar biomaRt
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
# Conectar con la base de datos Ensembl
# Lista de ENSEMBL Transcript IDs
data <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
transcript_ids <- data$Ensembl
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
res <- getBM(attributes = c('ensembl_transcript_id_version',
'ensembl_gene_id',
'external_transcript_name',
'external_gene_name'),
filters = 'ensembl_transcript_id_version',
values = transcript_ids,
mart = mart)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
View(mart)
View(mart)
data <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
transcript_ids <- data$Ensembl
if (length(transcript_ids) == 0) {
stop("No transcript IDs found in the CSV file.")
}
# Establecer el directorio de trabajo
setwd("C:/Users/PC/OneDrive/Documentos/Systems_Biology_master/Internship/Internship/Thresholding/HKgenes")
# Instalar y cargar biomaRt
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
# Leer el archivo CSV
data <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
# Asegurarse de que la columna de IDs existe
if (!"Ensembl" %in% colnames(data)) {
stop("La columna 'Ensembl' no se encuentra en el archivo CSV.")
}
transcript_ids <- data$Ensembl
# Verificar que transcript_ids no esté vacío
if (length(transcript_ids) == 0) {
stop("No transcript IDs found in the CSV file.")
}
# Conectar con la base de datos Ensembl
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# Realizar la consulta a la base de datos Ensembl
res <- getBM(
attributes = c('ensembl_transcript_id_version',
'ensembl_gene_id',
'external_transcript_name',
'external_gene_name'),
filters = 'ensembl_transcript_id_version',
values = transcript_ids,
mart = mart
)
# Establecer el directorio de trabajo
setwd("C:/Users/PC/OneDrive/Documentos/Systems_Biology_master/Internship/Internship/Thresholding/HKgenes")
# Instalar y cargar biomaRt
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
# Leer el archivo CSV
data <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
# Asegurarse de que la columna de IDs existe
if (!"Ensembl" %in% colnames(data)) {
stop("La columna 'Ensembl' no se encuentra en el archivo CSV.")
}
transcript_ids <- data$Ensembl
# Verificar que transcript_ids no esté vacío
if (length(transcript_ids) == 0) {
stop("No transcript IDs found in the CSV file.")
}
# Conectar con la base de datos Ensembl
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# Mensaje de depuración para confirmar la conexión
cat("Conexión a Ensembl establecida.\n")
# Realizar la consulta a la base de datos Ensembl
res <- tryCatch({
getBM(
attributes = c('ensembl_transcript_id_version',
'ensembl_gene_id',
'external_transcript_name',
'external_gene_name'),
filters = 'ensembl_transcript_id_version',
values = transcript_ids,
mart = mart
)
}, error = function(e) {
cat("Error en la función getBM:\n", e$message, "\n")
NULL
})
# Verificar si la consulta tuvo éxito
if (is.null(res)) {
stop("La consulta a Ensembl falló. Verifica los detalles del error arriba.")
}
# Establecer el directorio de trabajo
setwd("C:/Users/PC/OneDrive/Documentos/Systems_Biology_master/Internship/Internship/Thresholding/HKgenes")
# Instalar y cargar biomaRt
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
# Leer el archivo CSV
data <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
# Asegurarse de que la columna de IDs existe
if (!"Ensembl" %in% colnames(data)) {
stop("La columna 'Ensembl' no se encuentra en el archivo CSV.")
}
transcript_ids <- data$Ensembl
# Verificar que transcript_ids no esté vacío
if (length(transcript_ids) == 0) {
stop("No transcript IDs found in the CSV file.")
}
# Mostrar los primeros 10 transcript IDs
cat("Primeros 10 transcript IDs:\n")
print(head(transcript_ids, 10))
# Conectar con la base de datos Ensembl utilizando un espejo específico
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", host = "useast.ensembl.org")
# Mensaje de depuración para confirmar la conexión
cat("Conexión a Ensembl establecida.\n")
# Realizar la consulta a la base de datos Ensembl
res <- tryCatch({
getBM(
attributes = c('ensembl_transcript_id_version',
'ensembl_gene_id',
'external_transcript_name',
'external_gene_name'),
filters = 'ensembl_transcript_id_version',
values = transcript_ids,
mart = mart
)
}, error = function(e) {
cat("Error en la función getBM:\n", e$message, "\n")
NULL
})
# Verificar si la consulta tuvo éxito
if (is.null(res)) {
stop("La consulta a Ensembl falló. Verifica los detalles del error arriba.")
}
# Establecer el directorio de trabajo
setwd("C:/Users/PC/OneDrive/Documentos/Systems_Biology_master/Internship/Internship/Thresholding/HKgenes")
# Cargar las librerías necesarias
library(httr)
library(jsonlite)
# Leer el archivo CSV
data <- read.csv("Housekeeping_GenesHuman.csv", sep = ";")
# Asegurarse de que la columna de IDs existe
if (!"Ensembl" %in% colnames(data)) {
stop("La columna 'Ensembl' no se encuentra en el archivo CSV.")
}
transcript_ids <- data$Ensembl
# Verificar que transcript_ids no esté vacío
if (length(transcript_ids) == 0) {
stop("No transcript IDs found in the CSV file.")
}
# Mostrar los primeros 10 transcript IDs
cat("Primeros 10 transcript IDs:\n")
print(head(transcript_ids, 10))
# Función para consultar la API REST de Ensembl
fetch_ensembl_data <- function(ids) {
url <- "https://rest.ensembl.org"
query <- paste0(url, "/lookup/id/", paste(ids, collapse = ","), "?expand=1")
response <- GET(query, content_type("application/json"))
if (response$status_code == 200) {
fromJSON(content(response, "text"))
} else {
cat("Error en la consulta REST: Status code", response$status_code, "\n")
NULL
}
}
# Dividir los IDs en lotes para evitar consultas demasiado grandes
batch_size <- 50
result_list <- list()
for (i in seq(1, length(transcript_ids), by = batch_size)) {
batch_ids <- transcript_ids[i:min(i + batch_size - 1, length(transcript_ids))]
cat("Consultando IDs:", paste(batch_ids, collapse = ", "), "\n")
result <- fetch_ensembl_data(batch_ids)
if (!is.null(result)) {
result_list <- append(result_list, list(result))
}
}
# Combinar los resultados en un solo data frame
all_results <- do.call(rbind, lapply(result_list, function(x) {
if (is.data.frame(x)) {
x
} else {
do.call(rbind, lapply(x, function(y) as.data.frame(t(y), stringsAsFactors = FALSE)))
}
}))
# Mostrar los resultados
print(all_results)
# Guardar los resultados en un archivo CSV
write.csv(all_results, "Ensembl_Results.csv", row.names = FALSE)
